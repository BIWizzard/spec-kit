// Family Finance Web Application - Prisma Schema
// Generated from data model specifications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  admin
  editor
  viewer
}

enum AccountType {
  checking
  savings
  credit
  loan
}

enum Frequency {
  once
  weekly
  biweekly
  monthly
  quarterly
  annual
}

enum IncomeStatus {
  scheduled
  received
  cancelled
}

enum PaymentStatus {
  scheduled
  paid
  overdue
  cancelled
  partial
}

enum PaymentType {
  once
  recurring
  variable
}

enum AttributionType {
  manual
  automatic
}

enum SyncStatus {
  active
  error
  disconnected
}

enum SubscriptionStatus {
  trial
  active
  suspended
  cancelled
}

enum ActionType {
  create
  update
  delete
  login
  logout
  sync
}

// Core Models
model Family {
  id                    String            @id @default(cuid())
  name                  String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  settings             Json              // { timezone, currency, fiscalYearStart }
  subscriptionStatus   SubscriptionStatus @default(trial)
  dataRetentionConsent Boolean           @default(false)

  // Relationships
  familyMembers       FamilyMember[]
  bankAccounts        BankAccount[]
  incomeEvents        IncomeEvent[]
  payments            Payment[]
  budgetCategories    BudgetCategory[]
  spendingCategories  SpendingCategory[]
  auditLogs           AuditLog[]

  @@map("families")
}

model FamilyMember {
  id           String    @id @default(cuid())
  familyId     String
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  role         Role      @default(viewer)
  permissions  Json      // { canManageBankAccounts, canEditPayments, canViewReports, canManageFamily }
  mfaEnabled   Boolean   @default(false)
  mfaSecret    String?   // encrypted
  emailVerified Boolean  @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?
  deletedAt    DateTime? // soft delete

  // Relationships
  family     Family      @relation(fields: [familyId], references: [id], onDelete: Cascade)
  sessions   Session[]
  auditLogs  AuditLog[]
  attributions PaymentAttribution[]

  @@map("family_members")
}

model BankAccount {
  id               String      @id @default(cuid())
  familyId         String
  plaidAccountId   String      @unique
  plaidItemId      String
  institutionName  String
  accountName      String
  accountType      AccountType
  accountNumber    String      // last 4 digits only
  currentBalance   Decimal     @db.Decimal(12, 2)
  availableBalance Decimal     @db.Decimal(12, 2)
  lastSyncAt       DateTime?
  syncStatus       SyncStatus  @default(active)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  deletedAt        DateTime?   // soft delete

  // Relationships
  family       Family        @relation(fields: [familyId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

model IncomeEvent {
  id               String        @id @default(cuid())
  familyId         String
  name             String
  amount           Decimal       @db.Decimal(10, 2)
  scheduledDate    DateTime      @db.Date
  actualDate       DateTime?     @db.Date
  actualAmount     Decimal?      @db.Decimal(10, 2)
  frequency        Frequency
  nextOccurrence   DateTime      @db.Date
  allocatedAmount  Decimal       @default(0) @db.Decimal(10, 2)
  remainingAmount  Decimal       @default(0) @db.Decimal(10, 2)
  status           IncomeStatus  @default(scheduled)
  source           String?
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relationships
  family             Family               @relation(fields: [familyId], references: [id], onDelete: Cascade)
  paymentAttributions PaymentAttribution[]
  budgetAllocations   BudgetAllocation[]

  @@map("income_events")
}

model Payment {
  id                  String        @id @default(cuid())
  familyId            String
  payee               String
  amount              Decimal       @db.Decimal(10, 2)
  dueDate             DateTime      @db.Date
  paidDate            DateTime?     @db.Date
  paidAmount          Decimal?      @db.Decimal(10, 2)
  paymentType         PaymentType
  frequency           Frequency?
  nextDueDate         DateTime?     @db.Date
  status              PaymentStatus @default(scheduled)
  spendingCategoryId  String?
  autoPayEnabled      Boolean       @default(false)
  notes               String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relationships
  family             Family               @relation(fields: [familyId], references: [id], onDelete: Cascade)
  spendingCategory   SpendingCategory?    @relation(fields: [spendingCategoryId], references: [id])
  paymentAttributions PaymentAttribution[]

  @@map("payments")
}

model PaymentAttribution {
  id              String          @id @default(cuid())
  paymentId       String
  incomeEventId   String
  amount          Decimal         @db.Decimal(10, 2)
  attributionType AttributionType
  createdAt       DateTime        @default(now())
  createdBy       String

  // Relationships
  payment     Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  incomeEvent IncomeEvent  @relation(fields: [incomeEventId], references: [id], onDelete: Cascade)
  creator     FamilyMember @relation(fields: [createdBy], references: [id])

  @@map("payment_attributions")
}

model BudgetCategory {
  id               String    @id @default(cuid())
  familyId         String
  name             String
  targetPercentage Decimal   @db.Decimal(5, 2) // 0-100
  color            String    // hex color
  sortOrder        Int
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  family            Family             @relation(fields: [familyId], references: [id], onDelete: Cascade)
  spendingCategories SpendingCategory[]
  budgetAllocations BudgetAllocation[]

  @@map("budget_categories")
}

model BudgetAllocation {
  id               String   @id @default(cuid())
  incomeEventId    String
  budgetCategoryId String
  amount           Decimal  @db.Decimal(10, 2)
  percentage       Decimal  @db.Decimal(5, 2)
  createdAt        DateTime @default(now())

  // Relationships
  incomeEvent    IncomeEvent    @relation(fields: [incomeEventId], references: [id], onDelete: Cascade)
  budgetCategory BudgetCategory @relation(fields: [budgetCategoryId], references: [id], onDelete: Cascade)

  @@map("budget_allocations")
}

model SpendingCategory {
  id               String    @id @default(cuid())
  familyId         String
  name             String
  parentCategoryId String?
  budgetCategoryId String
  icon             String?
  color            String    // hex color
  monthlyTarget    Decimal?  @db.Decimal(10, 2)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  family         Family            @relation(fields: [familyId], references: [id], onDelete: Cascade)
  parentCategory SpendingCategory? @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subCategories  SpendingCategory[] @relation("CategoryHierarchy")
  budgetCategory BudgetCategory    @relation(fields: [budgetCategoryId], references: [id])
  payments       Payment[]
  transactions   Transaction[]

  @@map("spending_categories")
}

model Transaction {
  id                   String            @id @default(cuid())
  bankAccountId        String
  plaidTransactionId   String            @unique
  amount               Decimal           @db.Decimal(10, 2)
  date                 DateTime          @db.Date
  description          String
  merchantName         String?
  pending              Boolean           @default(false)
  spendingCategoryId   String?
  categoryConfidence   Decimal?          @db.Decimal(3, 2) // 0-1
  userCategorized      Boolean           @default(false)
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Relationships
  bankAccount      BankAccount       @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  spendingCategory SpendingCategory? @relation(fields: [spendingCategoryId], references: [id])

  @@map("transactions")
}

model Session {
  id             String    @id @default(cuid())
  familyMemberId String
  token          String    @unique
  ipAddress      String
  userAgent      String
  expiresAt      DateTime
  createdAt      DateTime  @default(now())

  // Relationships
  familyMember FamilyMember @relation(fields: [familyMemberId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuditLog {
  id             String     @id @default(cuid())
  familyId       String
  familyMemberId String
  action         ActionType
  entityType     String
  entityId       String
  oldValues      Json?
  newValues      Json?
  ipAddress      String
  createdAt      DateTime   @default(now())

  // Relationships
  family       Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyMember FamilyMember @relation(fields: [familyMemberId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}
