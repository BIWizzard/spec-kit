name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "✅ Valid version format: $VERSION"

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          echo "✅ Tag $VERSION is available"

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Generate Prisma client
        working-directory: backend
        run: npx prisma generate

      - name: Build backend
        working-directory: backend
        run: |
          npm run build
          npm prune --production

      - name: Build frontend
        working-directory: frontend
        env:
          NODE_ENV: production
        run: npm run build

      - name: Create release archive
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Create backend distribution
          mkdir -p dist/backend
          cp -r backend/dist/* dist/backend/
          cp -r backend/node_modules dist/backend/
          cp backend/package.json dist/backend/
          cp -r backend/prisma dist/backend/

          # Create frontend distribution
          mkdir -p dist/frontend
          cp -r frontend/.next/* dist/frontend/
          cp -r frontend/node_modules dist/frontend/
          cp frontend/package.json dist/frontend/

          # Create configuration files
          cp vercel.json dist/
          cp docker-compose.yml dist/
          cp .env.example dist/

          # Create release archive
          tar -czf family-finance-${VERSION}.tar.gz -C dist .

          # Create checksums
          sha256sum family-finance-${VERSION}.tar.gz > family-finance-${VERSION}.tar.gz.sha256

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            family-finance-*.tar.gz
            family-finance-*.tar.gz.sha256

  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: family_finance_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Verify checksums
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sha256sum -c family-finance-${VERSION}.tar.gz.sha256

      - name: Extract and test release
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          mkdir -p test-release
          tar -xzf family-finance-${VERSION}.tar.gz -C test-release

          # Test backend
          cd test-release/backend
          node -e "console.log('Backend build test passed')"

          # Test database migrations
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/family_finance_test \
            npx prisma migrate deploy

          echo "✅ Release artifacts tested successfully"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, test-release]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "- First release of Family Finance Web Application" >> CHANGELOG.md
          fi

          echo "## What's Changed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Add sections for different types of changes
          echo "### 🚀 Features" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD --grep="^feat" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md

          echo "### 🐛 Bug Fixes" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD --grep="^fix" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md

          echo "### 📖 Documentation" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD --grep="^docs" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md

          # Set output for release notes
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: Family Finance ${{ needs.validate-release.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: family-finance-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_name: family-finance-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: family-finance-${{ needs.validate-release.outputs.version }}.tar.gz.sha256
          asset_name: family-finance-${{ needs.validate-release.outputs.version }}.tar.gz.sha256
          asset_content_type: text/plain

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: https://family-finance.vercel.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Run production migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd backend
          npx prisma migrate deploy

      - name: Update production health checks
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60

          # Verify production deployment
          curl -f https://family-finance.vercel.app/api/health
          echo "✅ Production deployment successful"

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "✅ Release ${{ needs.validate-release.outputs.version }} deployed successfully"
          echo "🚀 Production URL: https://family-finance.vercel.app"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Release ${{ needs.validate-release.outputs.version }} deployment failed"