openapi: 3.0.3
info:
  title: Family Finance - Authentication API
  description: Authentication and authorization endpoints for family finance application
  version: 1.0.0
  contact:
    name: Family Finance API Team
    email: api@familyfinance.com

servers:
  - url: https://api.familyfinance.com/v1
    description: Production server
  - url: https://staging-api.familyfinance.com/v1
    description: Staging server

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register new family member
      description: Create a new family member account with initial family setup
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Family member registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Authenticate family member
      description: Login with email and password, returns JWT token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Account locked due to failed attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout current session
      description: Invalidate the current JWT token
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send password reset email to user
      tags:
        - Password Reset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent (always returns 200 for security)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid email format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      summary: Reset password with token
      description: Set new password using reset token
      tags:
        - Password Reset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      summary: Change current password
      description: Change password while authenticated
      tags:
        - Password Reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/mfa/setup:
    post:
      summary: Setup MFA for user
      description: Generate MFA secret and QR code for TOTP setup
      tags:
        - Multi-Factor Authentication
      responses:
        '200':
          description: MFA setup data generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaSetupResponse'
        '409':
          description: MFA already enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/mfa/enable:
    post:
      summary: Enable MFA with verification
      description: Enable MFA after verifying TOTP code
      tags:
        - Multi-Factor Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaEnableRequest'
      responses:
        '200':
          description: MFA enabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaEnableResponse'
        '400':
          description: Invalid TOTP code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/mfa/disable:
    post:
      summary: Disable MFA
      description: Disable MFA with current password and TOTP code
      tags:
        - Multi-Factor Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaDisableRequest'
      responses:
        '200':
          description: MFA disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid credentials or TOTP code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email:
    post:
      summary: Verify email address
      description: Verify email using token sent via email
      tags:
        - Email Verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired verification token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/resend-verification:
    post:
      summary: Resend email verification
      description: Send new email verification token
      tags:
        - Email Verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Email already verified or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      summary: Get current user profile
      description: Get authenticated user's profile information
      tags:
        - Profile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/sessions:
    get:
      summary: List active sessions
      description: Get list of all active sessions for current user
      tags:
        - Sessions
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'

    delete:
      summary: Terminate all sessions
      description: Logout from all devices/sessions except current one
      tags:
        - Sessions
      responses:
        '200':
          description: All other sessions terminated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/sessions/{sessionId}:
    delete:
      summary: Terminate specific session
      description: Logout from specific session/device
      tags:
        - Sessions
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session terminated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - familyName
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          minLength: 12
          maxLength: 128
          description: Must contain uppercase, lowercase, number, and special character
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        familyName:
          type: string
          minLength: 1
          maxLength: 100
        timezone:
          type: string
          default: America/New_York
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          default: USD

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/UserProfile'
        family:
          $ref: '#/components/schemas/FamilyInfo'
        tokens:
          $ref: '#/components/schemas/TokenPair'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        totpCode:
          type: string
          pattern: '^[0-9]{6}$'
          description: Required if MFA is enabled
        rememberMe:
          type: boolean
          default: false

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/UserProfile'
        tokens:
          $ref: '#/components/schemas/TokenPair'
        mfaRequired:
          type: boolean
          description: True if MFA is enabled but not provided

    RefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    TokenResponse:
      type: object
      properties:
        tokens:
          $ref: '#/components/schemas/TokenPair'

    TokenPair:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Access token expiration in seconds
        tokenType:
          type: string
          enum: [Bearer]

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 12
          maxLength: 128

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 12
          maxLength: 128

    MfaSetupResponse:
      type: object
      properties:
        secret:
          type: string
          description: Base32 encoded secret for TOTP
        qrCode:
          type: string
          description: Base64 encoded QR code image
        backupCodes:
          type: array
          items:
            type: string
          description: One-time backup codes

    MfaEnableRequest:
      type: object
      required:
        - totpCode
      properties:
        totpCode:
          type: string
          pattern: '^[0-9]{6}$'

    MfaEnableResponse:
      type: object
      properties:
        message:
          type: string
        backupCodes:
          type: array
          items:
            type: string

    MfaDisableRequest:
      type: object
      required:
        - password
        - totpCode
      properties:
        password:
          type: string
        totpCode:
          type: string
          pattern: '^[0-9]{6}$'

    VerifyEmailRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    ResendVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, editor, viewer]
        permissions:
          $ref: '#/components/schemas/UserPermissions'
        mfaEnabled:
          type: boolean
        emailVerified:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    UserPermissions:
      type: object
      properties:
        canManageBankAccounts:
          type: boolean
        canEditPayments:
          type: boolean
        canViewReports:
          type: boolean
        canManageFamily:
          type: boolean

    FamilyInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        settings:
          $ref: '#/components/schemas/FamilySettings'

    FamilySettings:
      type: object
      properties:
        timezone:
          type: string
        currency:
          type: string
        fiscalYearStart:
          type: integer
          minimum: 1
          maximum: 12

    SessionListResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionInfo'

    SessionInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ipAddress:
          type: string
        userAgent:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        isCurrent:
          type: boolean

    SuccessResponse:
      type: object
      properties:
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        details:
          type: object
          additionalProperties: true